<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUa5LLE+wTXRQr0ufUK9Ln1Cv
        S3NNsk0rAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOsU4NUa5MoVCvTP5Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/lCvS59VqlUMAAAAAAAAAAAAAAAAAAAAAAAAAABOsU4NUK9Mz1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9MzlWqVQwAAAAAAAAAAAAAAAAAAAAAUK9MolCvTP9Qr0z/UK9M/1Kx
        UP9SsVD/UK9M/1CvTP9Qr0z/UK9M/1CvTP9RrkyeAAAAAAAAAAAAAAAAU6xNKFCvTP1Qr0z/UK9M/1Gx
        T/975qP/fOWi/1GxT/9Qr0z/UK9M/1CvTP9Qr0z/UK9M/VGuSiYAAAAAAAAAAFGuTXtQr0z/UK9M/1Kx
        UP996Kf/jPnD/4v6w/9+6Kf/UrJQ/1CvTP9Qr0z/UK9M/1CvTP9Rrk14AAAAAAAAAABQr0ufUK9M/1Cv
        TP9z2pH/i/jB/1y+ZP9cv2X/i/nD/3/pqv9SslD/UK9M/1CvTP9Qr0z/Ua5MngAAAAAAAAAAUK9Ln1Cv
        TP9Qr0z/U7NS/1m7X/9Qr0z/UK9M/1y+ZP+L+cL/f+qq/1OyUf9Qr0z/UK9M/1GuTJ4AAAAAAAAAAFCv
        THxQr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/XcBn/4z6xP9956b/UrFQ/1CvTP9Qr0x5AAAAAAAA
        AABPsEotUK9M/lCvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9bvGH/hvK4/1u9Yv9Qr0z+TbJNKwAA
        AAAAAAAAAAAAAFCvTKxQr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CwTf9Qr0z/UK9MqAAA
        AAAAAAAAAAAAAAAAAABQr1AQUa5M0VCvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M0FWq
        RA8AAAAAAAAAAAAAAAAAAAAAAAAAAFCvUBBQr02tUK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z+Ua5Mq1Wq
        RA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFGuTC9Qr02CT7BMpE+wTKRPsEuBTrFOLgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD+fwAA8A8AAOAHAADAAwAAwAMAAMADAACAAQAAgAEAAMAD
        AADAAwAAwAMAAOAHAADwDwAA/D8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABVqlUMU6xNKE6xSj5OsUo+U6xNKFWqVQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFOsTCVPsEuBUK9Ly1CvTP5Qr0z/UK9M/1CvTP9Qr0z/UK9M/VCvTMpQr0yATrFOJAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFGuURNQr02SUK9N+lCvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z5UK9Nj1WqRxIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABRrkwvUK9L31CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M3k6xTi4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAUK9NVlCvTPhQr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/T7BM91GuS1UAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE6xTjFQr0z1UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M9FCvSjAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVqkkVUK9N5lCvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M5VGu
        URMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFCvTYxQr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1q8Yf9avGD/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9MiQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNsk0hUK9M+VCvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Zul7/ifa+/4j1vP9YuVz/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z4Uq1KHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFCvS31Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/Wbpe/4n2vv+Q/8z/kP/M/4j1vP9YuVz/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9PsEt6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUK9MzlCv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1m6Xv+J9r7/kP/M/5D/zP+Q/8z/kP/M/4f1vP9YuFv/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvS8sAAAAAAAAAAAAAAAAAAAAAAAAAAE2z
        TRRQr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9avGH/ivfA/5D/zP+Q/8z/euSg/3rjoP+Q/8z/kP/M/4n3
        vv9Zu1//UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/lWqRxIAAAAAAAAAAAAA
        AAAAAAAAUa5ML1CvTP9Qr0z/UK9M/1CvTP9Qr0z/Wbpe/4n2vv+Q/8z/kP/M/37op/9SsVD/UrFQ/37n
        pv+Q/8z/kP/M/4j0u/9YuFv/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/T7BKLQAA
        AAAAAAAAAAAAAAAAAABQr01JUK9M/1CvTP9Qr0z/UK9M/1CvTP9dwGb/jfrE/5D/zP985qT/UbFP/1Cv
        TP9Qr0z/UbBO/3rjoP+Q/8z/kP/M/4n2vv9Zul7/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9RrkpIAAAAAAAAAAAAAAAAAAAAAFCvTUlQr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9ewmn/euOg/1Gx
        T/9Qr0z/UK9M/1CvTP9Qr0z/UbBO/3rjoP+Q/8z/kP/M/4n2vv9Zul7/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1GuSkgAAAAAAAAAAAAAAAAAAAAAUK9KMFCvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UrFQ/37npv+Q/8z/kP/M/4f0uv9XuFr/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/TrFOLgAAAAAAAAAAAAAAAAAAAABNs00UUK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UrFQ/37npv+Q/8z/kP/M/4f0
        uv9XuFr/UK9M/1CvTP9Qr0z/UK9M/1CvTP5VqkcSAAAAAAAAAAAAAAAAAAAAAAAAAABQr0zTUK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UrFQ/37n
        pv+Q/8z/kP/M/4f0uv9XuFr/UK9M/1CvTP9Qr0z/UK9M0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFCv
        TYJQr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UbBO/3rjoP+Q/8z/kP/M/3vlo/9Qr0z/UK9M/1CvTP9Qr0yAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAATbJNIVCvTPlQr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UrFQ/37npv+D77L/VbVV/1CvTP9Qr0z/UK9M+FKtSh8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAUK9NllCvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UbBO/1OyUf9Qr0z/UK9M/1CvTP9Qr02SAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVqkkVUK9N5lCvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M5VGu
        URMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQr0xAUK9N+lCvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TfpRrk0/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQr01WUK9M+FCv
        TP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9PsEz3Ua5LVQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABRrk1CUK9M7FCvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M606xS0EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABRrlETUK9NklCvTfpQr0z/UK9M/1CvTP9Qr0z/UK9M/1CvTP9Qr0z/UK9M/1Cv
        TP9Qr0z/UK9M+VCvTY9VqkcSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU6xMJU+wS4FQr0vLUK9M/lCvTP9Qr0z/UK9M/1Cv
        TP9Qr0z9UK9MylCvTIBOsU4kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVqlUMU6xNKE6x
        Sj5OsUo+U6xNKFWqVQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////gB///gAH//wAA//4AAH/8AAA/+AAAH/AA
        AA/wAAAP8AAAD+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB/AAAA/wAAAP+AAAH/wA
        AD/+AAB//wAA//+AAf//4Af/////////////////
</value>
  </data>
</root>